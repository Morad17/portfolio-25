/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: SDC PERFORMANCE™️ (https://sketchfab.com/3Duae)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/animated-robot-sdc-3d127f327a6c4033a32b810b5fb071ed
Title: Animated ROBOT SDC
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { animated } from "@react-spring/three";
import { useFrame, useThree } from "@react-three/fiber";
import { Vector2} from "three";
import robot from "./animated_robot_sdc.glb";

export function Robot(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(robot);
  const { actions } = useAnimations(animations, group);
  const { size } = useThree();
  const [mouse, setMouse] = useState(new Vector2());
  const headBone = useRef();

  useEffect(() => {
    if (nodes.GLTF_created_0_rootJoint) {
      const skeleton = nodes.GLTF_created_0_rootJoint;

      skeleton.traverse((bone) => {
        if (bone.name === "Tete_2") {
          headBone.current = bone;
          // Set initial neutral position (correct the 40-degree offset)
          bone.rotation.y = -Math.PI * 0.22;
          bone.rotation.x = 0;
        }
      });
    }
  }, [nodes]);

  useEffect(() => {
    const handleMouseMove = (event) => {
      setMouse(
        new Vector2(
          (event.clientX / size.width) * 2 - 1,
          -(event.clientY / size.height) * 2 + 1
        )
      );
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, [size]);

  useFrame(() => {
    if (headBone.current) {
      const baseRotationY = -Math.PI * 0.22;
      const mouseRotationY = mouse.x * 0.3;
      headBone.current.rotation.y = baseRotationY + mouseRotationY;
    }
  });

  useEffect(() => {
    if (animations.length > 0) {
      const firstAnimation = Object.keys(actions)[0];
      const action = actions[firstAnimation];

      if (action) {
        action.play();
        action.paused = true;
        action.time = 0.51;
      }
    }
  }, [actions, animations]);

  return (
    <animated.group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[0, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[0, 0, 0]}>
              <group name="Armature_82" rotation={[0, 0, 0]}>
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.Rubber}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <group name="Doigts_81" />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </animated.group>
  );
}

useGLTF.preload(robot);

// rembrandt

// city
// Made by @NikkitaFTW & contributors inspired by the gltfjsx cli
